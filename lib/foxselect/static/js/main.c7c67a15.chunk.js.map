{"version":3,"sources":["registerServiceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","process","indexOf","console","log","warn","App","React","lazy","init","el","service","render","fallback","className","dataService","apiEnv","FoxSelect","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"miDAUoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oDCRoB,EAAIC,wBAA+BC,QAAQ,UAKnEC,QAAQC,IAAI,8DAHZD,QAAQE,KAAK,mEACbF,QAAQC,IAAM,cAKhB,IAAME,EAAMC,IAAMC,MAAK,kBAAM,uDAclBC,EAAO,SAASC,EAAIC,GAC7BC,iBACE,kBAAC,WAAD,CAAUC,SAAU,yBAAKC,UAAU,gCAAf,eAClB,kBAACR,EAAD,CAAKS,YAAaJ,KAElBD,IAIAX,EAAWF,QAAUA,OAAOC,UAAYD,OAAOC,SAASC,SAC1DiB,EAAS,GASb,GAPEA,GADG,EAAIjB,EAASG,QAAS,SAChB,cACE,EAAIH,EAASG,QAAQ,aACvB,YAEA,MAEXC,QAAQC,IAAI,yBAAgBY,GACxB,QAAUA,GAAU,eAAiBA,EAAQ,CAC/C,IAAMC,EAAY,GAClBA,EAAUR,KAAOA,EACjBZ,OAAOoB,UAAYA,OAEnBR,EAAKS,SAASC,cAAc,kBAAkB,MDyD1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c7c67a15.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Suspense } from 'react' // , { Component }\nimport { render } from 'react-dom'\nimport { unregister } from './registerServiceWorker'\nimport 'core-js/stable'\n\nimport './css/bootstrap-ns.css'\nimport './css/style.css'\n\nconst loggingEnabled = ( -1 < process.env.REACT_APP_WPAPI_EP.indexOf('.local') )? true : false\nif( ! loggingEnabled ){\n  console.warn('🔔 LOGGING DISABLED: Dev endpoint `.local` not found.');\n  console.log = function(){}\n} else {\n  console.log('👍 console.log is enabled for `.local` domains.')\n}\n\nconst App = React.lazy(() => import('./App'))\n\n/**\n * Setup our initialization method.\n *\n * When we're loading directly inside a browser (i.e. API_ENV == `localhost`),\n * we simply call `init()` directly. When API_ENV == `salesforce` or `web`, we\n * provide the `init` method via a global `FoxSelect` object which can then be\n * accessed inside the Salesforce environment or the browser as a global\n * object attached to the `window`.\n *\n * @param      object  el       The DOM object we're attaching to\n * @param      object  service  Connection for passing the Part No. back to Salesforce\n */\nexport var init = function(el, service){\n  render((\n    <Suspense fallback={<div className=\"alert alert-info text-center\">Loading...</div>}>\n      <App dataService={service} />\n    </Suspense>\n    ),el)\n}\n\n// Test jQuery buttons by forcing `apiEnv` to web and uncommenting code in index.js\nconst hostname = window && window.location && window.location.hostname\nlet apiEnv = ''\nif( -1 < hostname.indexOf( 'force' ) ){\n  apiEnv = 'salesforce'\n} else if ( -1 < hostname.indexOf('localhost') ){\n  apiEnv = 'localhost'\n} else {\n  apiEnv = 'web'\n}\nconsole.log('🔔 apiEnv = ', apiEnv)\nif( 'web' === apiEnv || 'salesforce' === apiEnv ){\n  const FoxSelect = {}\n  FoxSelect.init = init\n  window.FoxSelect = FoxSelect\n} else {\n  init(document.querySelector('#rootfoxselect'),null)\n}\n\nunregister()"],"sourceRoot":""}